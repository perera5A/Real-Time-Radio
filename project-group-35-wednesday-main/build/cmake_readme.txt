To unit test and benchmark your new features (or refactored code) incrementally, follow these guidelines (see also the Appendix in the lab 4 pdf document).

Keep your project's C++ source files in the "src" sub-folder, header files in the "include" sub-folder, benchmarking functions in the "bench" sub-folder, and unit tests in the "test" sub-folder. The main file for the project (containing the "main" function) should be named "project.cpp." Files in the "bench" sub-folder should have "bench" in their names, and files in the "test" sub-folder should have "test" in their names.

Note that the Makefile previously located in the "src" sub-folder has been removed. All builds should be performed in the "build" sub-folder using the auto-generated Makefile. To modify compiler settings or project configuration, update the CMakeLists.txt file in the root directory. Then, change to the "build" sub-folder and run:

cmake ..

A Makefile will be autogenerated based on the configuration in CMakeLists.txt. Once generated, running the command make will produce three executables:

project - executable for the project code that will eventually run on Raspberry Pi
test_primitives - executable for unit testing
bench_primitives - executable for benchmarking

Google Test is configured to discover and run tests. To temporarily disable a unit test, add the DISABLED_ prefix to the test name, recompile, and then rerun test_primitives.

By default, all registered benchmarks are executed when running bench_primitives. To run a subset of benchmarks, use the --benchmark_filter flag. For example, to benchmark only functions with "DFT" in their names, run:

./bench_primitives --benchmark_filter=DFT.*

For more details on Google's test framework, visit:
https://github.com/google/googletest/blob/main/docs/index.md

For more details on Google's benchmark framework, visit:
https://github.com/google/benchmark/blob/main/docs/user_guide.md